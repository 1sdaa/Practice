//游戏内部game.c
#define _CRT_SECURE_NO_WARNINGS 1
#include "game.h"
void InitBoard(char board[ROW][COL],int row,int col)
{
	//打印内容是   |   |   
	      //    ---|---|---

	int i=0;
	int j=0;
	for(i=0;i<row;i++)
	{
		for(j=0;j<col;j++)
		{
			 board[i][j]=' ';
		}
		//printf("");
	
	}
}
void DisplayBoard(char board[ROW][COL],int row,int col)
{
	int i=0;
	
	for(i=0;i<row;i++)
	{
		int j=0;
		for(j=0;j<col;j++)
		{
			printf(" %c ",board[i][j]);
			if(j<col-1)
				printf("|");
		}
		printf("\n");
		if(i<row-1)
		{
			for(j=0;j<col;j++)
			{
				printf("---");
				if(j<col-1)
				   printf("|");
			}
			printf("\n");
		}
			
	}
}

void PlayerMove(char board[ROW][COL],int row,int col)
{
	int x=0;
	int y=0;
	printf("玩家先走：\n");
	while(1)
	{
		printf("请输入要下的坐标\n");
		scanf("%d%d", &x, &y);
		//判断坐标的合法性
		if(x>=1 && x<=row && y>=1 && y<=col)
		{
			if(board[x-1][y-1]==' ')
			{
				board[x-1][y-1]='*';
				break;
			}
				
			else
			{
				printf("该坐标已被占用，请重新选择\n");
			}
		}
		else
		{
			printf("输入错误，请重新输入\n");
		}
	}

}

void ComputerMove(char board[ROW][COL],int row,int col)
{
	int x=0;
	int y=0;
	printf("电脑走：\n");
	while(1) 
	{
		x=rand()%row;
		y=rand()%col;
		if(board[x][y]=' ')
		{
			board[x][y]='#';
			break;
		}
	}
	
}
//返回1表示棋盘满了
//返回0表示棋盘没满
int ISfull(char board[ROW][COL],int row,int col)
{
	int i=0;
	int j =0;
	for(i=0;i<row;i++)
	{
		for(j=0;j<col;j++)
		{
			if(board[i][j]=' ')
			{
				return 0;//没满
			}
		}
	}
	return 1;//满了
}

char ISWIN(char board[ROW][COL],int row,int col)
{
	int i=0;
	//横三行
	for(i=0;i<row;i++)
	{
		if(board[i][0]==board[i][1] && board[i][1]==board[i][2] && board[i][1]!=' ')
		{
			return board[i][0];
		}

		
	}
	//竖三列
	for(i=0;i<col;i++)
	{
		if(board[0][i]==board[1][i] && board[1][i]==board[2][i] && board[1][i]!=' ')
		{
			return board[0][i];
		}
			
	}
	//两个对角线
	if(board[0][0]==board[1][1] && board[2][2]==board[1][1] && board[1][1]!='0')
	{
		return board[1][1];
	}
	if(board[0][2]==board[1][1] && board[2][0]==board[1][1] && board[1][1]!='0')
	{
		return board[1][1];
	}
	//判断是否平局
	if(1==ISfull(board,ROW,COL))
	{
		return 'Q';
	}
	return 'C';
}





//头文件game.h
#define _CRT_SECURE_NO_WARNINGS 1
#define ROW 3
#define COL 3
#include <stdio.h>
#include<time.h>
#include<stdlib.h>
//声明
void InitBoard(char board[ROW][COL],int row,int col);
void DisplayBoard(char board[ROW][COL],int row,int col);//声明里面要放参数
void PlayerMove(char board[ROW][COL],int row,int col);
void ComputerMove(char board[ROW][COL],int row,int col);
//返回四种状态
//玩家赢----'*'
//电脑赢----'#'
//平局----'Q'
//继续----'C'
char ISWIN(char board[ROW][COL],int row,int col);



//主程序test.c
#define _CRT_SECURE_NO_WARNINGS 1
#include<time.h>
#include <windows.h>
#include "game.h"

//三子棋游戏，玩完一局之后还可以继续玩
//进来之后就打印菜单》》》1.play  0.exit
//选择开始还是退出
void menu()
{
	printf("******************************\n");
	printf("******  1.play   0.exit  *****\n");
	printf("******************************\n");
}
//游戏的整个实现
void game()
{
	char ret=0;
	//创建一个棋盘
	char board[ROW][COL]={0};//棋盘中放的是0
	//初始化棋盘
	InitBoard(board,ROW,COL);
	//打印棋盘
	DisplayBoard(board,ROW,COL);
	//下棋
	while(1)
	{
		//玩家下棋
		PlayerMove(board,ROW,COL); 
		DisplayBoard(board,ROW,COL);
		//判断玩家是否赢
		ret = ISWIN(board,ROW,COL);
		if(ret!='C')
		{
			break;
		}
		//电脑下棋
		ComputerMove(board,ROW,COL);
		DisplayBoard(board,ROW,COL);
		//判断电脑是否赢
		ret = ISWIN(board,ROW,COL);
		if(ret!='C')
		{
			break;
		}
	}
	if(ret=='*')
	{
		printf("玩家赢\n");
	}
	else if (ret=='#')
	{
		printf("电脑赢\n");
	}
	else if(ret=='Q')
	{
		printf("平局\n");
	}
}
void test()
{
	int input = 0;
	srand((unsigned int)time(NULL));
	do
	{
	menu();
	printf("请选择：");
	scanf("%d",&input);
	switch(input)
	{
	case 1:
		game();
		break;
	case 0:
		printf("退出游戏\n");
		break;
	default:
		printf("输入错误，请重新输入\n");
		break;
	}
	} while(input);
}
int main()
{
	test();
	system("pause");
	return 0;
}

