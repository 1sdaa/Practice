#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include <string.h>
#include<stdlib.h>
#include<windows.h>
//输入三个数字，把他们三个从大到小排序
int main()
{
	int a = 0;
	int b = 0;
	int c = 0;
	scanf("%d%d%d",&a, &b, &c);
	if( a < b )
	{
		int tmp = a;
		a=b;
		b=tmp;
	}
	if(a<c)
	{
		int tmp=a;
		a=c;
		c=tmp;
	}
	if(b<c)
	{
		int tmp=b;
		b=c;
		c=tmp;
	}
	printf("%d %d %d \n",a, b, c);
	system("pause");
	return 0;
}

////输入密码，三次以内如果输入正确，则提示密码正确；否则提示密码错误，超过三次退出程序
//int main()
//{
//	//输入密码，三次以内如果输入正确，则提示密码正确；否则提示密码错误，超过三次退出程序
//	int i = 0;
//	char password[20] = {0};
//	for(i=0;i<3;i++)
//	{
//		printf("请输入密码：\n");
//		scanf("%s",password);
//		if(strcmp(password,"123456") == 0)//==不能用来比较两个字符串是否相等，
//			                              //可以用strcmp（）函数来进行判断两个字符串是否相等，
//			                             //如果返回“0”值则说明第一个字符串与
//										 //第二个字符串相等，如果第一个字符串大于
//			                           //第二个字符串会返回一个大于0的数字；
//									   //如果第一个小于第二个会返回一个小于零的数字。
//		{
//			printf("密码输入正确。\n");
//			break;
//		}
//		else
//		{
//			printf("密码错误，请重试。\n");
//		}
//			
//	}
//	if(i==3)
//		printf("密码错误超过三次，请退出程序。\n");
//
//	system("pause");
//	return 0;
//}


//一行行打印，直至“wel....!！”把#完全替换
////int main()
////{
////	//
////	char arr1[]="welcome to bit!!!!!!";
////	char arr2[]="####################";
////	int left = 0;
////	int right = strlen(arr1)-1;
////	while(left<=right)
////	{
////		arr2[left] = arr1[left];
////	    arr2[right] = arr1[right];
////	    printf("%s\n",arr2);
////		//休息一秒
////		Sleep(10);
////		system("cls");//执行系统命令的一个函数-清空屏幕
////		left++;
////		right--;
////	}
////	system("pause");
////	return 0;
////}




////二分查找法找元素,只能在有序数组中才可以这种方法查找
//int main()
//{
//	int arr[] = {1,2,3,4,5,6,7,8,9,10};//定义一个1到10的有序数组
//	int k = 17;
//	int sz = sizeof(arr)/sizeof(arr[0]);//计算元素个数
//	int left = 0;//左下标
//	int right = sz-1;//有下标为元素个数-1
//	while(left<=right)//只有当left小于等于right的时候才能进来查找，只有
//		             //这个时候左右之间才有元素以供查找，否则就没有元素来查找
//	{
//	    int mid = (left+right)/2;
//		if(arr[mid]>k)
//		{
//			right = mid-1;
//		
//		}
//		else if(arr[mid] < k)
//		{
//			left = mid+1;
//		}
//		else
//		{
//			printf("找到了,下标是：%d \n",mid);
//		    break;
//		}
//	}
//	if(left>right)
//		printf("找不到\n");
//	system("pause");
//	return 0;
//}
//



//求n的阶乘代码
//int main()
//
//{
//	int i = 0;
//	int n = 0;
//	int ret = 1;
//	scanf("%d",&n);
//	for(i=1;i<=n;i++)
//	{
//		ret = ret * i;
//	}
//	printf("%d\n",ret);
//	system("pause");
//
//	return 0;
//}
