#include<stdio.h>
#include<stdlib.h>
////写一段代码告诉我们当前机器的字节序
//int main()
//{
//	int a=1;
//	char* p= (char*)&a;
//	if(*p==1)//从起始地址向后访问一个字节，因为机器内部存储的是该数字二进制的补码的十六进制，
//		    //对数字1来说存的就是0x00000001
//			//小端存储：01 00 00 00
//			//大端存储：00 00 00 01
//		printf("小端\n");
//	else
//		printf("大端\n");
//	system("pause");
//	return 0;
//}
//用函数实现上述字节序的功能，写函数时尽量不要打印，保证函数相对独立，便于他人使用
//小端，返回1
//大端，返回0
//int check_sys(void)//如果函数不需要传参，括号内部可加上void
//{
//	int a= 1;
//	char* p= (char*)&a;
//	//小端，返回1
//	//大端，返回0
//	return *p;
//}
//int main()
//{
//	int ret=0;
//	ret = check_sys();
//	if(ret==1)
//	{
//		printf("小端\n");
//	}
//	else
//	{
//		printf("大端\n");
//	}
//	system("pause");
//	return 0;
//}



////求打印出的数字是多少
//int main()
//{
//	//10000000 00000000 00000000 00000001-原码
//	//11111111 11111111 11111111 11111110-反码
//	//11111111 11111111 11111111 11111111-补码
//	char a=-1;
//	signed char b=-1;
//	unsigned char c=-1;
//	printf("a=%d,b=%d,c=%d",a,b,c);//%d打印的是整型，会进行整型提升
//	system("pause");
//	return 0;
//}


////求打印出的数字是多少
//#include <string.h>
//int main()
//{
//	char a[1000];
//	int i;
//	for(i=0;i<1000;i++)
//	{
//		a[i]=-1-i;
//	}
//	printf("%d\n",strlen (a));//这一块一减会从-1、-2……-128再然后就会变成127、126……3、2、1、0，
//	                         //此时strlen()函数遇到0了就会停止，所以计算结果应该是128+127=255
//	system("pause");
//	return 0;
//}


//下属结果是什么
int main()
{
	unsigned char i=0;
	for(i=0;i<=255;i++)
	{
		printf("hello world\n");//结果是hello world死循环打印，因为定义的是无符号数，无符号char的定义是0~255，所以会死循环，此时255+1=0；
	}
	system("pause");
	return 0;
}
